package DebugUI

import TableLayout
import ClosureTimers
import FramehandleNames
import Fx
import ClosureEvents
import ClosureKeyPresses
import ClosureFrames
import HashMap
import LinkedList
import ItemObjEditing
import ObjectPreview
import ItemIds


enum debugTypes
    UNIT
    ITEM

class PaletteSection
    string header
    LinkedList<int> idsList

    construct(string header, LinkedList<int> idsList)
        this.header = header
        this.idsList = idsList

let humanUnit = new PaletteSection("Units", asList(
'hpea','hfoo','hgry','hgyr','hkni','hsor','hmtt','hspt',
'hdhw','hmpr','hmtm','hrif','hbot','hbsh','hdes'))

let humanHero = new PaletteSection("Heroes", asList(
'Hpal', 'Hamg','Hmkg','Hblm', 'afac'))

let humanBuildings = new PaletteSection("Buildings", asList(
'htow','hkee','hcas','hhou','halt','hbar','hbla','hlum','harm','hars',
'hgra','hwtw','hatw','hgtw','hctw','hshy','hvlt'))

let humanSpecial = new PaletteSection("Special", asList(
'hrtt', 'hmil','hwat','hwt2','hwt3', 'hpxe', 'hphx'
))

let orcUnit = new PaletteSection("Units", asList(
'opeo','ogru','orai','otau','ohun','ocat','okod','owyv',
'otbr','odoc','oshm','ospw', 'odes', 'obot'))

let orcHero = new PaletteSection("Heroes", asList(
'Obla','Ofar','Otch','Oshd'))

let orcBuildings = new PaletteSection("Buildings", asList(
'ogre','ostr','ofrt','oalt','obar','ofor','otto',
'osld','obea','otrb','owtw','ovln', 'oshy'))

let orcSpecial = new PaletteSection("Special", asList(
'oeye', 'otot','osw1','osw2','osw3','ohwd','osp1','osp2','osp3','osp4', 'ospm', 'otbk'
))

// let nightelf = new PaletteSection("Nightelf", asList(
// 'Edem','Edmm','Ekee','Emoo','Ewar','earc','ebal','ebsh','echm','edcm','edes',
// 'edoc','edot','edry','edtm','efdr','efon','ehip','ehpr','emtg','esen','espv',
// 'even','ewsp','eaoe','eaom','eaow','eate','eden','edob','edos','egol','emow',
// 'eshy','etoa','etoe','etol','etrp'
// ))

// let undead = new PaletteSection("Undead", asList(
// 'Ucrl', 'Udea', 'Udre', 'Ulic', 'uabo', 'uaco', 'uban', 'ubsp', 'ucrm', 'ucry',
// 'ucs1', 'ucs2', 'ucs3', 'ucsB', 'ucsC', 'ufro', 'ugar', 'ugho', 'ugrm', 'uloc',
// 'umtw', 'unec', 'uobs', 'uplg', 'ushd', 'uske', 'uskm', 'uubs', 'uaod', 'ubon',
// 'ugol', 'ugrv', 'unp1', 'unp2', 'unpl', 'usap', 'usep', 'ushp', 'uslh', 'utod',
// 'utom', 'uzg1', 'uzg2', 'uzig'
// ))

let artifact = new PaletteSection("Artifact", asList('ckng','desc','modt','ofro','ratf','tkno'))

let campaign = new PaletteSection("Campaign", asList('azhr','bzbe','bzbf','ches','cnhn','dkfw',
                      'dphe','dthb','engs','glsk','gmfr','gopr',
                    //   'jpnt','k3m1','k3m2','k3m3','ktrm','kybl',
                    //   'kygh','kymn','kysn','ledg','mgtk','mort',
                    //   'phlt','sclp','sehr','shwd','skrt','sorf',
                      'thle','wolg','wtlg'
                      ))

let charged = new PaletteSection("Charged", asList('ankh','fgdg','fgfh','fgrd','fgrg','fgsk',
                    //  'hlst','infs','mnst','pdiv','pghe','pgma',
                    //  'pnvu','pomn','pres','rej3','sand','shar',
                    //  'sres','sror','srrc','totw','wcyc','whwd',
                     'wild','will','wlsd','woms','wshs','wswd'
                     ))

let miscellaneous = new PaletteSection("Miscellaneous", asList('amrc','anfg','arsc','arsh','asbl',
                           'axas','bfhr','blba','brag','btst',
                        //    'ccmd','cosl','crdt','drph','dtsb',
                        //    'dust','envl','esaz','fgun','flag',
                        //    'frgd','frhg','fwss','gemt','gldo',
                        //    'gobm','grsl','gsou','gvsm','hbth',
                        //    'horl','iwbr','jdrn','kgal','klmm',
                        //    'lnrn','lure','mlst','mnsf','nflg',
                        //    'nspi','ocor','ofir','oflg','ofr2',
                        //    'oli2','olig','oslo','oven','pams',
                        //    'pgin','pspd','ram1','ram2','ram3',
                        //    'ram4','rat3','rde0','rde1','rej1',
                        //    'rej2','rej4','rej5','rej6','rnsp',
                        //    'rots','rugt','rump','sbok','schl',
                        //    'scul','sfog','shcw','shdt','shen',
                        //    'shhn','shrs','shtm','sksh','sor1',
                        //    'sor2','sor3','sor4','sor5','sor6',
                        //    'sor7','sor8','sor9','sora','soul',
                        //    'spre','sprn','srbd','srtl','stpg',
                        //    'stre','stwa','tbak','tbar','tbsm',
                        //    'tels','tfar','tgxp','thdm','tlum',
                           'tmmt','tmsc','uflg','vddl','ward'
                           ))

let permanent = new PaletteSection("Permanent", asList('afac','ajen','belv','bgst','brac','bspd',
                       'ciri','clfm','clsd','cnob','crys','dsum',
                    //    'evtl','gcel','hcun','hval','kpin','lgdh',
                    //    'lhst','mcou','odef','penr','pmna','prvt',
                    //    'rag1','rat6','rat9','ratc','rde2','rde3',
                    //    'rde4','rhth','rin1','rlif','rst1','rwiz',
                       'sbch','spsh','ssil','stel','war2'
                       ))

let powerup = new PaletteSection("Powerup", asList('gfor','gold','gomn','guvi','lmbr','manh',
                     'rdis','rhe1','rhe2','rhe3','rma2','rman',
                    //  'rre1','rre2','rreb','rres','rspd','rspl',
                    //  'rsps','rwat','tdex','tdx2','texp','tin2',
                     'tint','tpow','tst2','tstr'
                     ))

let purchasable = new PaletteSection("Purchasable", asList('hslv','mcri','moon','pclr','phea','pinv',
                         'plcl','pman','pnvl','ritd','rnec','shas',
                        //  'shea','silk','skul','sman','sneg','spro',
                        //  'sreg','ssan','stwp','tcas','tgrh','tret',
                         'tsct','vamp','wneg','wneu'
                         ))


constant SECTION_TOP_SPACING = 0.0045
constant SECTION_BOTTOM_SPACING = 0.0025

@configurable constant rotationDegrees = 30

class ObjectSpawnerDebug
    vec2 mousePos
    DummyFx debugPreviewFx
    Fx unitFx
    ItemFx itemFx
    player _player
    player owner
    EventListener mouseEvent
    bool isActive
    debugTypes debugType


    construct(int objectId, debugTypes debugType)
        this._player = EventData.getTriggerPlayer()
        this.owner =  EventData.getTriggerPlayer()
        this.debugType = debugType
        setupOsKey()
        setupListener()
        createObjectPreview(objectId, debugType)

    function setupOsKey()
        onKeyPress(this._player, OSKEY_1, () -> setOwner(players[0]))
        onKeyPress(this._player, OSKEY_2, () -> setOwner(players[1]))
        onKeyPress(this._player, OSKEY_3, () -> setOwner(players[2]))
        onKeyPress(this._player, OSKEY_4, () -> setOwner(players[3]))
        onKeyPress(this._player, OSKEY_5, () -> setOwner(players[4]))
        onKeyPress(this._player, OSKEY_6, () -> setOwner(players[5]))
        onKeyPress(this._player, OSKEY_7, () -> setOwner(players[6]))
        onKeyPress(this._player, OSKEY_8, () -> setOwner(players[7]))
        onKeyPress(this._player, OSKEY_9, () -> setOwner(players[8]))
        onKeyPress(this._player, OSKEY_0, () -> setOwner(players[9]))

        onKeyPress(OSKEY_1, OSKEY_META.CTRL, () -> setOwner(players[10]))
        onKeyPress(OSKEY_2, OSKEY_META.CTRL, () -> setOwner(players[11]))
        onKeyPress(OSKEY_3, OSKEY_META.CTRL, () -> setOwner(players[12]))

        onKeyPress(this._player, OSKEY_MULTIPLY) ->
            if this.isActive
                this.rotateFx(rotationDegrees)
        onKeyPress(this._player, OSKEY_DIVIDE) ->
            if this.isActive
                this.rotateFx(-rotationDegrees)

    function setupListener()
        EventListener.add(EVENT_PLAYER_MOUSE_MOVE) ->
            if EventData.getTriggerPlayer() == this._player and this.isActive
                this.mousePos = vec2(BlzGetTriggerPlayerMouseX(),
                                     BlzGetTriggerPlayerMouseY())
                this.debugPreviewFx.setXY(this.mousePos)

        mouseEvent = EventListener.add(EVENT_PLAYER_MOUSE_DOWN) ->
            if EventData.getTriggerPlayer() == this._player and this.isActive
                if BlzGetTriggerPlayerMouseButton() == MOUSE_BUTTON_TYPE_LEFT
                    this.debugPreviewFx.spawnObject()
                else if BlzGetTriggerPlayerMouseButton() == MOUSE_BUTTON_TYPE_RIGHT
                    this.disable()

    function createObjectPreview(int objectId, debugTypes debugType)
        this.debugType = debugType
        if this.isActive
            this.debugPreviewFx.setFxSkin(objectId)
            return
        this.isActive = true
        this.owner = this._player
        switch this.debugType
            case UNIT
                debugPreviewFx = new UnitFx(this.mousePos, objectId, this._player, 270..asAngleDegrees())
            case ITEM
                debugPreviewFx = new ItemFx(this.mousePos, objectId, this._player)

    function setOwner(player owner)
        if this.isActive
            this.owner = owner
            this.debugPreviewFx.setOwner(owner)

    function rotateFx(int degrees)
        this.debugPreviewFx.setXYAngle(
            (angle(unitFx.getXYAngle().radians() + degrees * DEGTORAD)))

    function disable()
        if this.isActive
            this.isActive = false
            this.debugPreviewFx.hiddenDestroy()


let playerToDebugSpawner = new HashMap<player, ObjectSpawnerDebug>

function createObjectSpawner(int objectId, debugTypes debugType)
    let _player = EventData.getTriggerPlayer()
    if not playerToDebugSpawner.has(_player)
        playerToDebugSpawner.put(_player, new ObjectSpawnerDebug(objectId, debugType))
    else
        playerToDebugSpawner.get(_player).createObjectPreview(objectId, debugType)

function TableLayout.addPaletteSection(PaletteSection content, int maxCell, debugTypes dt)
    this.padBot(0.01)
    this.row()
    this.add(p(content.header))
    this.row()
    for elem in content.idsList
        if content.idsList.indexOf(elem) % maxCell == 0
            this..row()
        this..add(imgBtn(getUnitIcon(elem))..onClick(() -> createObjectSpawner(elem, dt)) )

function showFrame(framehandle baseFrame, string frameName)
    for idx = 0 to baseFrame.getChildrenCount()
        let childFrame = baseFrame.getChild(idx)
        if childFrame.getName().startsWith("contentFrame")
            childFrame.hide()
        if childFrame.getName() == frameName
            childFrame.show()

init
    doAfter(1.) ->
        let baseFrame = createFrame("FRAME", "baseFrame", GAME_UI, "", 0)
        ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.6, 0.515))
        ..setSize(0.3, 0.35)

        let headerFrame = createFrame("FRAME", "headerFrame", baseFrame, "", 0)
        ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.6, 0.515))
        ..setSize(0.3, 0.07)
        ..hide()
        ..show(Player(0))

        let contentFrameHuman = createFrame("FRAME", "contentFrameHuman", baseFrame, "", 0)
        ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.6, 0.475))
        ..setSize(0.3, 0.28)
        ..hide()
        ..show(Player(0))

        let contentFrameOrc = createFrame("FRAME", "contentFrameOrc", baseFrame, "", 0)
        ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.6, 0.475))
        ..setSize(0.3, 0.28)
        ..hide()

        let contentFrameItem = createFrame("FRAME", "contentFrameItem", baseFrame, "", 0)
        ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.6, 0.475))
        ..setSize(0.3, 0.28)
        ..hide()

        // Used just for the back drop texture
        createFrame("HeroPickMenuBackdrop", baseFrame, 0, 0)..setAllPoints(baseFrame)



        new TableLayout(0.3, 0.07)
        ..row()
        ..add(btn("Human")..setWidth(0.06)..onClick(() -> showFrame(baseFrame, "contentFrameHuman") ))
        ..add(btn("Orc")..setWidth(0.06)..onClick(() -> showFrame(baseFrame, "contentFrameOrc") ))
        // ..add(btn("Undead")..setWidth(0.06)..onClick(() -> showFrame(baseFrame, "contentFrameItem") ))
        // ..add(btn("NightElf")..setWidth(0.06))
        ..add(btn("Items")..setWidth(0.06)..onClick(() -> showFrame(baseFrame, "contentFrameItem") ))
        ..applyTo(headerFrame)

        new TableLayout(0.3, 0.28)
        ..addPaletteSection(humanHero, 8, debugTypes.UNIT)
        ..addPaletteSection(humanUnit, 8, debugTypes.UNIT)
        ..addPaletteSection(humanBuildings, 8, debugTypes.UNIT)
        ..addPaletteSection(humanSpecial, 8, debugTypes.UNIT)
        .applyTo(contentFrameHuman)

        new TableLayout(0.3, 0.28)
        ..addPaletteSection(orcHero, 8, debugTypes.UNIT)
        ..addPaletteSection(orcUnit, 8, debugTypes.UNIT)
        ..addPaletteSection(orcBuildings, 8, debugTypes.UNIT)
        ..addPaletteSection(orcSpecial, 8, debugTypes.UNIT)
        ..applyTo(contentFrameOrc)

        new TableLayout(0.3, 0.28)
        ..addPaletteSection(artifact, 8, debugTypes.ITEM)
        // ..addPaletteSection(campaign, 8, debugTypes.ITEM)
        // ..addPaletteSection(charged, 8, debugTypes.ITEM)
        ..addPaletteSection(miscellaneous, 8, debugTypes.ITEM)
        ..addPaletteSection(permanent, 8, debugTypes.ITEM)
        ..addPaletteSection(powerup, 8, debugTypes.ITEM)
        // ..addPaletteSection(purchasable, 8, debugTypes.ITEM)
        ..applyTo(contentFrameItem)


                            // .createFrame()..hide()..setAbsPoint(FRAMEPOINT_TOP, vec2(0.6, 0.485))
        // framehandle orcPage      = new TableLayout(0.3, 0.28)..addPaletteSection(orc, 8).createFrame()..hide()
        // framehandle nightelfPage = new TableLayout(0.3, 0.28)..addPaletteSection(nightelf, 8).createFrame()..hide()
        // framehandle undeadPage   = new TableLayout(0.3, 0.28)..addPaletteSection(undead, 8).createFrame()..hide()
